name: ‚öôÔ∏è Backend CI/CD (Microservices)

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/backend-ci.yml"
      - "backend/**"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"

jobs:
  get-services:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Cache Node modules backend
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-backend-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: ./backend
        run: npm install

      - name: Lint code
        working-directory: ./backend
        run: npm run lint

      - name: Format check
        working-directory: ./backend
        run: npm run format -- --check
      
      - name: Start Database Services (Docker Compose)
        working-directory: ./database
        run: docker compose up -d

      - name: Wait for Database to be Ready
        run: sleep 10

      # --- B∆Ø·ªöC ƒê√É T·ªêI ∆ØU H√ìA (K·∫æT H·ª¢P LOAD SECRETS V√Ä PRISMA GENERATE) ---
      - name: Load Secrets, Generate Prisma Client, and Build
        working-directory: ./backend # √Åp d·ª•ng cho c·∫£ 3 l·ªánh
        shell: bash
        run: |
          echo "::group::1. Load Database Secrets"
          # Ghi Secret v√†o file t·∫°m (ph∆∞∆°ng ph√°p ƒë√°ng tin c·∫≠y nh·∫•t)
          cat << EOF > secret_config.json
          ${{ secrets.DATABASE_CONFIG }}
          EOF

          # TƒÉng c∆∞·ªùng b·∫£o m·∫≠t: Th√™m Masking cho to√†n b·ªô Secret
          echo "::add-mask::${{ secrets.DATABASE_CONFIG }}"

          # Chuy·ªÉn ƒë·ªïi JSON th√†nh chu·ªói export (export KEY='VALUE';)
          ENV_EXPORTS=$(jq -r '
            to_entries | 
            .[] | 
            # ƒê·∫£m b·∫£o d√πng single quotes ƒë·ªÉ gi√° tr·ªã kh√¥ng b·ªã hi·ªÉu sai b·ªüi shell
            "export \(.key)='\''\(.value)'\'';"
          ' secret_config.json)

          # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng v√†o shell hi·ªán t·∫°i
          eval $ENV_EXPORTS

          # D·ªçn d·∫πp file t·∫°m
          rm secret_config.json
          echo "::endgroup::"

          # ----------------------------------------------------
          echo "::group::2. Create Database"
          echo "Checking and creating databases..."
          ADMIN_DB_URL="postgresql://postgres:postgres@postgres:5432/postgres"

          DB_NAMES=("user" "notification" "task")

          for db_name in "${DB_NAMES[@]}"; do
            echo "Attempting to create database: $db_name"
            docker run --rm --network host postgres psql "$ADMIN_DB_URL" -c "CREATE DATABASE \"$db_name\" IF NOT EXISTS" || true
          done

          echo "Database creation attempt complete."
          echo "::endgroup::"

          # ----------------------------------------------------

          echo "::group::3. Generate Prisma Client for each service"
          echo "üîç Looking for prisma schemas..."

          # L·ªánh n√†y b√¢y gi·ªù S·∫º TH√ÄNH C√îNG v√¨ c√°c bi·∫øn m√¥i tr∆∞·ªùng (nh∆∞ DATABASE_URL)
          # ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi eval $ENV_EXPORTS
          find apps -type f -path "*/prisma/schema.prisma" | while read schema; do
            service=$(echo "$schema" | cut -d'/' -f2)
            echo "üöÄ Generating Prisma Client for $service using $schema"
            npx prisma generate --schema="$schema"
          done
          echo "::endgroup::"

          # ----------------------------------------------------

          echo "::group::4. Build Backend"
          npm run build
          echo "::endgroup::"

          # ----------------------------------------------------

          echo "::group::5. Run Backend"

          for service in apps/*; do
            service_name=$(basename "$service")
            if [ "$service_name" != "api-gateway" ]; then
              echo "üöÄ Testing service: $service_name"
              # Start the service in background
              npm run start:dev $service_name &
              PID=$!
              
              # Wait a few seconds to see if it crashes
              sleep 5

              if ps -p $PID > /dev/null; then
                echo "‚úÖ Service $service_name started successfully!"
                kill $PID
              else
                echo "‚ùå Service $service_name failed to start!"
                exit 1
              fi
            fi
          done
          echo "::endgroup::"

          echo "::group::6. Test Backend"
          npm run test --if-present
          echo "::endgroup::"

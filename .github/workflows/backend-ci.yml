name: ‚öôÔ∏è Backend CI/CD (Microservices)

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/backend-ci.yml"
      - "backend/**"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"

jobs:
  get-services:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Cache Node modules backend
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-backend-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: ./backend
        run: npm install

      - name: Lint code
        working-directory: ./backend
        run: npm run lint

      - name: Format check
        working-directory: ./backend
        run: npm run format -- --check
      
      - name: Start Database Services (Docker Compose)
        working-directory: ./database
        run: docker compose up -d

      - name: Wait for Database to be Ready
        run: sleep 10

      - name: Load Secrets, Generate Prisma Client, and Build
        working-directory: ./backend
        shell: bash
        run: |
          echo "::group::1. Load Database Secrets"
          cat << EOF > secret_config.json
          ${{ secrets.DATABASE_CONFIG }}
          EOF

          echo "::add-mask::${{ secrets.DATABASE_CONFIG }}"

          ENV_EXPORTS=$(jq -r '
            to_entries | 
            .[] | 
            # ƒê·∫£m b·∫£o d√πng single quotes ƒë·ªÉ gi√° tr·ªã kh√¥ng b·ªã hi·ªÉu sai b·ªüi shell
            "export \(.key)='\''\(.value)'\'';"
          ' secret_config.json)

          eval $ENV_EXPORTS

          rm secret_config.json
          echo "::endgroup::"

          # ----------------------------------------------------
          echo "::group::2. Create Database"
          - name: Create Databases

          POSTGRES_CONTAINER=$(docker ps --filter "ancestor=postgres:alpine" --format "{{.Names}}")
          echo "Using Postgres container: $POSTGRES_CONTAINER"

          DB_NAMES=("user" "notification" "task")
          for db_name in "${DB_NAMES[@]}"; do
            echo "Attempting to create database: $db_name"
            # üí• THE FIX IS HERE üí•
            # Use the standard SQL command that runs directly.
            # We connect to the default 'postgres' database to run the CREATE command.
            docker exec "$POSTGRES_CONTAINER" psql -U postgres -d postgres -c "
              CREATE DATABASE \"$db_name\"
              WITH OWNER = postgres
              ENCODING = 'UTF8'
              LC_COLLATE = 'en_US.utf8'
              LC_CTYPE = 'en_US.utf8'
              TABLESPACE = pg_default;
            " 2> /dev/null || true
            
            # The '2> /dev/null || true' handles errors gracefully:
            # 1. '2> /dev/null' suppresses standard error (which includes the "already exists" error).
            # 2. '|| true' ensures the shell script continues even if the command fails (e.g., DB exists).
          done
          echo "::endgroup::"

          # ----------------------------------------------------

          echo "::group::3. Generate Prisma Client for each service"
          echo "üîç Looking for prisma schemas..."
          
          find apps -type f -path "*/src/prisma/schema.prisma" | while read schema; do
            service=$(echo "$schema" | cut -d'/' -f2)
            echo "üöÄ Generating Prisma Client for $service using $schema"
            npx prisma generate --schema="$schema"
          done
          echo "::endgroup::"

          # ----------------------------------------------------

          echo "::group::4. Build Backend"
          npm run build
          echo "::endgroup::"

          # ----------------------------------------------------

          echo "::group::5. Run Backend"

          for service in apps/*; do
            service_name=$(basename "$service")
            if [ "$service_name" != "api-gateway" ]; then
              echo "üöÄ Testing service: $service_name"
              # Start the service in background
              npm run start:dev $service_name &
              PID=$!
              
              # Wait a few seconds to see if it crashes
              sleep 5

              if ps -p $PID > /dev/null; then
                echo "‚úÖ Service $service_name started successfully!"
                kill $PID
              else
                echo "‚ùå Service $service_name failed to start!"
                exit 1
              fi
            fi
          done
          echo "::endgroup::"

          # ----------------------------------------------------

          echo "::group::6. Test Backend"
          npm run test --if-present
          echo "::endgroup::"
